<html>
  <head>
      <meta charset="utf-8">
	    <meta http-equiv="X-UA-Compatible" content="IE=Edge">
	    <!--[if lt IE 9]>
	    <script type="text/javascript" src="aight.min.js"></script>
	    <![endif]-->
          
    <title>GEVU : Carte des diagnostics DPE</title>
    <script src="https://maps.googleapis.com/maps/api/js?v=3.exp&sensor=false&libraries=visualization"></script>
    <script type="text/javascript" src="../js/d3.js"></script>
    <script>
    // Données
	var map, heatMapData = new Array(), heatmap; 
	var poids = {A:1,B:2,C:3,D:4,E:5,F:6,G:7}

	var rCercle = d3.scale.linear().domain([1, 120]).range([10, 60]);
	var colors = new Array();
	colors["GES"]=d3.scale.linear().domain([1,2,3,4,5,6,7]).range(["#f5effd", "#dbc0ed", "#d5a8f9", "#cc98ea", "#c071f1", "#a84ced", "#881adf"]);
	colors["DPE"]=d3.scale.linear().domain([1,2,3,4,5,6,7]).range(["#00ff00", "#4afe00", "#b2ff00", "#ffff00", "#ffb200", "#fe4d00", "#fe0000"]);
	var markers = {GES:{A:[],B:[],C:[],D:[],E:[],F:[],G:[]},DPE:{A:[],B:[],C:[],D:[],E:[],F:[],G:[]}};

	var m = [20, 80, 20, 80],
    w = 500 - m[1] - m[3],
    h = 700 - m[0] - m[2],
    i = 0,
    duration = 500,
    root,
    vis,
    diagonal;
	//On créer un arbre qui prend la hauteur et la largeur comme valeur
	var tree = d3.layout.tree()
	    .size([h, w]); 

	//Initialise la carte
	function initialize() {
    	var mapOptions = {
          zoom: 11,
          center: new google.maps.LatLng(49.598362444011975, 0.2588131734374777),
          mapTypeId: google.maps.MapTypeId.SATELLITE
        };

        map = new google.maps.Map(document.getElementById('map_canvas'),
            mapOptions);
		/*pour trouver le centrage de la map
        google.maps.event.addListener(map, 'center_changed', function() {
             console.log(map.getCenter());
          });
		*/
		//récupère les données
      	d3.json("../stat/globale?type=patrimoineDiag&idBase=<?php echo $this->idBase; ?>", function(jsData) { 

      		/*création des donnée pour la carte
			jsData.children[0].children.forEach(function(geo) {
				getMarkers(geo, dataGES, colorGES);
      		});
			jsData.children[1].children.forEach(function(geo) {
				getMarkers(geo, dataDPE, colorDPE);
      		});
      		*/

			//On créer une variable vis à laquelle on sélectionne un graphique où l'on ajoute un svg qui prend les hauteurs et largeurs affichées
			vis = d3.select("#chart_svg").append("svg")
		    	.attr("width", w + m[1] + m[3])
		    	.attr("height", h + m[0] + m[2])
				.append("g")
		    	.attr("transform", "translate(" + m[3] + "," + m[0] + ")"); 
			
			diagonal = d3.svg.diagonal()
			    .projection(function(d) { return [d.y, d.x]; });

      		//création des données pour l'arbre
			root = jsData;
	    	root.x0 = h / 2;
	    	root.y0 = 0;
	    	function collapse(d) {
	    		if (d.children) {
	    	    	d._children = d.children;
	    	    	d._children.forEach(collapse);
	    	      	d.children = null;
	    	    }
			}
	    	root.children.forEach(collapse);
	    	update(root);
      		            
    	});
        
     }

	function getMarkers(geo) {
		var i=0;
		geo.geos.forEach(function(p) {
			var latLng = new google.maps.LatLng(p.lat, p.lng);
  	  		var w = parseInt(p.poids);
  	  		w = rCercle(w);
			var c = colors[geo.diag](poids[geo.name]);
  	  		//console.log(i+' - '+geo.name+"("+poids[geo.name]+") - "+p.poids+" => w="+w+" ; c="+c);
  	  		
			var marker = new google.maps.Marker({
	              position: latLng,
	              map: map,
	              icon: getCircle(w, c)
	            });
			markers[geo.diag][geo.name].push(marker);
			i++;
    	});	
	}

	function showMarkers(geo) {
		geo.visible = true;
		if(markers[geo.diag][geo.name].length==0){
			getMarkers(geo);
		}else{
			for (var i = 0; i < markers[geo.diag][geo.name].length; i++) {
				markers[geo.diag][geo.name][i].setMap(map);
			}
		}		
	}

	function clearMarkers(geo) {
		geo.visible = false;
		for (var i = 0; i < markers[geo.diag][geo.name].length; i++) {
			markers[geo.diag][geo.name][i].setMap(null);
		}		
	}
		
	function getCircle(val, color) {
		  return {
		    path: google.maps.SymbolPath.CIRCLE,
		    fillColor: color,
		    fillOpacity: 0.8,
		    scale: val / Math.PI,
		    strokeColor: 'white',
		    strokeWeight: .5
		  };
		}	  

  	function update(source) {
  		
  	  // Calcule la disposition de l'arbre
  	  var nodes = tree.nodes(root).reverse();
  	
  	  // Fixe la profondeur de l'arbre
  	  nodes.forEach(function(d) { d.y = d.depth * 180; });
  	
  	  // Met à jour les noeuds
  	  var node = vis.selectAll("g.node")
  	      .data(nodes, function(d) { return d.id || (d.id = ++i); });
  	
  	  // Entre les nouveaux noeuds et la position antérieure du parent
  	  var nodeEnter = node.enter().append("g")
  	      .attr("class", "node")
  	      .attr("transform", function(d) { return "translate(" + source.y0 + "," + source.x0 + ")"; })
  	      .on("click", click);
  	
		nodeEnter.append("circle")
			.attr("r", 1e-6)
  	      	.style("stroke", function(d) {return d.visible ? "#fff" : "black";})
  	      	.style("fill", function(d) {return diagColor(d);});
  	
  	  nodeEnter.append("text")
  	      .attr("x", function(d) { return d.children || d._children ? -10 : 10; })
  	      .attr("dy", ".35em")
  	      .attr("text-anchor", function(d) { return d.children || d._children ? "end" : "start"; })
  	    .text(function(d) {
  	        if(d.nb)return d.name + " = " + d.nb;
  			else return d.name;
  	    	})
		.style("fill", function(d) {
				return diagColor(d);
			});
  	
  	  // Noeud de transition à la nouvelle position
  	  var nodeUpdate = node.transition()
  	      .duration(duration)
  	      .attr("transform", function(d) { return "translate(" + d.y + "," + d.x + ")"; });
  	
  	  nodeUpdate.select("circle")
		.attr("r", 4.5)
		.style("stroke", function(d) {return d.visible ? "#fff" : "black";})
  	    .style("fill", function(d) { return diagColor(d); });
  	
  	  nodeUpdate.select("text")
  	      .style("fill-opacity", 1);
  	
  	  // Transition sortante des noeuds à la nouvelle position du parent
  	  var nodeExit = node.exit().transition()
  	      .duration(duration)
  	      .attr("transform", function(d) { return "translate(" + source.y + "," + source.x + ")"; })
  	      .remove();
  	
  	  nodeExit.select("circle")
  	      .attr("r", 1e-6);
  	
  	  nodeExit.select("text")
  	      .style("fill-opacity", 1e-6);
  	
  	  // Met à jour les liens
  	  var link = vis.selectAll("path.link")
  	      .data(tree.links(nodes), function(d) { return d.target.id; });
  	
  	  // Entre les nouveaux liens à la position antérieure du parent
  	  link.enter().insert("path", "g")
  	      .attr("class", "link")
  	      .attr("d", function(d) {
  	        var o = {x: source.x0, y: source.y0};
  	        return diagonal({source: o, target: o});
  	      });
  	
  	  // Lien de transition vers les nouvelles positions
  	  link.transition()
  	      .duration(duration)
  	      .attr("d", diagonal);
  	
  	  // Transition sortant des noeuds à la nouvelle position du parent
  	  link.exit().transition()
  	      .duration(duration)
  	      .attr("d", function(d) {
  	        var o = {x: source.x, y: source.y};
  	        return diagonal({source: o, target: o});
  	      })
  	      .remove();
  	
  	  // Anciennes positions de transition
  	  nodes.forEach(function(d) {
  	    d.x0 = d.x;
  	    d.y0 = d.y;
  	  });
  	}

  	function diagColor(d){
		if(!d.nb) return "#fff";
		var c = colors[d.diag](poids[d.name]); 
  	    return c; 
  	}
  	
  	// Bascule les enfants selon le clic
  	function click(d) {
  	  if (d.children) {
   	    //masque les markers
		d.children.forEach(function(geo) {
  			clearMarkers(geo);
   		});
  	    d._children = d.children;
  	    d.children = null;
  	  } else {
  	    d.children = d._children;
  	    d._children = null;
  	    //affiche les markers
  	    if(d.geos){
			if(d.visible)clearMarkers(d);
			else showMarkers(d);
  	    }else{
			d.children.forEach(function(geo) {
				showMarkers(geo);
	  		});
  	    }  	    
  	  }
  	  update(d);
  	}    

  	
  	</script>
	
    <style type="text/css">
		.node circle {
		  cursor: pointer;
		  stroke-width: 2px;
		}
		
		.node text {
		  font: 10px sans-serif;
		}
		
		path.link {
		  fill: none;
		  stroke: #ccc;
		  stroke-width: 1.5px;
		}
		#chart_svg {
		  float:left; 
		  padding:10px;
		}
		#map_canvas {
		  height: 700px; 
		  width: 600px; 
		}
		body {
			background-color:rgba(56,59,113,0.3);
		}

    </style>
	
  </head>

  <body onload="initialize()" >
    <div id="chart_svg" ></div>
    <div id="map_canvas" ></div>
  </body>
</html>