<?xml version="1.0" encoding="utf-8"?>
<mx:VBox horizontalCenter="0" verticalCenter="0" 
	xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:controls="it.sephiroth.controls.*"
	width="100%" height="100%" 
	creationComplete="initTree()" >
	<mx:Script>
        <![CDATA[
		  import mx.rpc.events.ResultEvent;
           
         [Bindable]	private var treeSource:XML;

         private function initTree():void {


          }
          
          private function changeEvt(event:Event):void {
         	if(!event.currentTarget.selectedItem)return;
            var theData:Object=event.currentTarget.selectedItem.cat;
            if (theData) {
               trace(" Data: " + theData.titre);
               //vÃ©rifie le type d'action a effectuer
               if(this.parentApplication.id=="grilles"){
	               this.parentApplication.initApp(theData.id);           	               	
               }
               if(this.parentApplication.id=="onadaflex"){
	               this.parentApplication.createMarkerGrille(theData.id);           	
               }
            }
         }

		public function readXmlTerre(event:ResultEvent):void{
	        treeSource = new XML(event.result);
		}

			import mx.events.TreeEvent;
			import it.sephiroth.renderers.TreecheckboxItemRenderer;

			/**
			 * Called on checkbox click
			 * check and update for both parents and child nodes
			 * according to the checkbox status
			 */
			private function onItemCheck( event: TreeEvent ): void
			{
				updateParents( event.item as XML, ( event.itemRenderer as TreecheckboxItemRenderer ).checkBox.checkState );
				updateChilds( event.item as XML, ( event.itemRenderer as TreecheckboxItemRenderer ).checkBox.checkState );
			}
			
			/**
			 * @see it.sephiroth.controls.CheckBoxExtended#checkState
			 * 
			 */
            private function updateChilds( item:XML, value: uint ):void
            {
		        var middle: Boolean = ( value & 2 << 1 ) == ( 2 << 1 );
		        var selected: Boolean = ( value & 1 << 1 ) == ( 1 << 1 );
	        
                if( item.children( ).length( ) > 0 && !middle )
                {
                    for each(var x: XML in item.terre )
                    {
                        x.@checked = value == ( 1 << 1 | 2 << 1 ) ? "2" : value == ( 1 << 1 ) ? "1" : "0";
                        updateChilds( x, value );
                    }
                }
            }
            
            private function updateParents( item: XML, value: uint ): void
            {
            	var checkValue: String = ( value == ( 1 << 1 | 2 << 1 ) ? "2" : value == ( 1 << 1 ) ? "1" : "0" );
                var parentNode: XML = item.parent( );
                if( parentNode )
                {
                    for each(var x: XML in parentNode.terre )
                    {
                        if( x.@checked != checkValue )
                        {
                            checkValue = "2"
                        }
                    }
                    parentNode.@checked = checkValue;
                    updateParents( parentNode, value );
                }
            }
			

        ]]>
	</mx:Script>
	<mx:HTTPService id="srvTerre" resultFormat="xml" result="readXmlTerre(event);" showBusyCursor="true" /> 
	
		<controls:TreeCheckBox id="mytree"
			showRoot="false"
			width="100%"
			height="100%"
			dataProvider="{treeSource}"
			openItems="{treeSource.terre}"
			labelField="@titreRub"
			checkField="@checked"
			itemCheck="onItemCheck( event )"
		/>
	</mx:VBox>	
