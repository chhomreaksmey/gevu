<?xml version="1.0" encoding="utf-8"?>
<mx:ViewStack width="100%" height="100%" 
	xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:ns2="compo.*"
	creationComplete="Init()"
	minHeight="200"
	>

	<mx:Script source="../http.as"/>

	<mx:Script>
        <![CDATA[
import mx.containers.TitleWindow;
import mx.events.FlexEvent;
import mx.controls.ComboBox;
import mx.containers.Form;
import mx.containers.FormItem;

import mx.collections.ArrayCollection;
import mx.collections.IViewCursor;
import mx.collections.Sort;
import mx.collections.SortField;

import mx.controls.Alert;
import mx.controls.DataGrid;
import mx.controls.dataGridClasses.DataGridColumn;
import mx.controls.listClasses.IDropInListItemRenderer;
import mx.controls.CheckBox;

import mx.events.CloseEvent;
import mx.events.DataGridEvent;

import mx.managers.CursorManager;

import mx.rpc.AsyncToken;
import mx.rpc.events.FaultEvent;
import mx.rpc.events.ResultEvent;
import mx.rpc.http.HTTPService;

import com.adobe.serialization.json.JSON

import mx.managers.PopUpManager;

import compo.*;

/**
 * paramétrage de l'objet
 */
[Bindable] public var endPoint:String;
[Bindable] public var objName:String;

/**
 * identifiants de la grille en cours de consultation
 */
[Bindable] public var idExi:String;
[Bindable] public var idRub:String;
[Bindable] public var idArt:String;
[Bindable] public var idGrille:String;
[Bindable] public var idDon:String;
[Bindable] public var idGroupe:String;
[Bindable] public var idMot:String;
[Bindable] public var pxml:String="";
/**
 * variables d'affichage
 */
[Bindable] public var Edit:Boolean=false;
[Bindable] public var SaveEdit:Boolean=true;
[Bindable] public var showAddDelete:Boolean=true;
[Bindable] public var showFiche:Boolean=true;
[Bindable] public var showUpdateFirst:Boolean=false;
[Bindable] public var showAddfilter:Boolean=false;
[Bindable] public var objAppelant:Object;
[Bindable] public var roleUti:String="";
[Bindable] public var twAMC:twAjoutMotClef;


/**
 * the array collection holds the rows that we use in the grid
 */
[Bindable]public var dataArr:ArrayCollection = new ArrayCollection();
public var cursor:IViewCursor;

/**
 * column that we order by. This is updated each time the users clicks on the 
 * grid column header. 
 * see headerRelease="setOrder(event);" in the DataGrid instantiation in the 
 * mxml file
 */
[Bindable]public var orderField:String = '';
private var orderColumn:Number;

            
//variable pour la mise à jour des diifférente view
private var idSolution:int;

private function selectSolution(event:Event):void {
	var item:Object=event.currentTarget.selectedItem;
	if(item){
		idSolution = item.id_solution;
		UpdLib.text=item.lib;
		UpdRef.text = item.ref;
		var i:int=UpdType.getIndex(item.LibTypeSolution);
		UpdType.cb.selectedIndex=i;
		ROSM.findByIdSolution(idSolution);
		ROSC.findByIdSolution(idSolution);
	}

}


/**
 * Executes by a another componement like tree or button. 
 */
public function initGrille(data:Object):void 
{
	idGrille = data.idGrille;
	idMot = data.idMot;
    
    //fill();
}


/**
 * Executes when the mxml is completed loaded. 
 * - Construction des colonnes.
 * - Initialize the Rest Gateway.
 */
public function Init():void 
{
	if(idGrille=="ActiUti"){
		ufCsv.visible=false;
		btnAddNew.visible=false;
		btnDelete.visible=false;
	}

	if(showAddDelete){
		AddDelete.percentWidth=100;
		AddDelete.height=30;
	}

    /**
     * set the event handler which prevents editing of the primary key
     */
    //dataGrid.addEventListener(DataGridEvent.ITEM_EDIT_BEGINNING, editCellHandler);

    /**
     * set the event handler which triggers the update actions - everytime an 
     * edit operation is finished
     */
    dataGrid.addEventListener(DataGridEvent.ITEM_EDIT_END, editCellEnd);
    
    //création des colonnes
    //ROS.getCols();
    
    //chargement des données
    ROS.getAll();
        
}



/**
 * Disallow editing of the primary key column.
 * @param e DataGridEvent contains details about the row and column of the grid 
 * where the user clicked
 */
private function editCellHandler(e:DataGridEvent):void
{
    /**
     * if the user clicked on the primary key column, stop editing
     */
    if(e.dataField == "id_donneeCol")
    {
        e.preventDefault();
        return;
    }
}

/**
 * Click handler for "Filter" button.
 * When setting another filter, refresh the collection, and load the new data
 */
private function filterResults():void
{
    ///fill();
}

/**
 * Event handler triggered when the user finishes editing an entry
 * triggers an "update" server command
 */
private function editCellEnd(e:DataGridEvent):void
{
	if(!SaveEdit)return;

    var dsRowIndex:int = e.rowIndex;
    var dsFieldName:String = e.dataField;
    var dsColumnIndex:Number = e.columnIndex;
    var col:DataGridColumn = dataGrid.columns[dsColumnIndex];
    var newvalue:String = dataGrid.itemEditorInstance[col.editorDataField];

	//création du tableau de valeur
	var vn:Array = new Array();
	vn[dsFieldName] = newvalue;

    trace("a:" + dsRowIndex + ", " + dsFieldName + "=" + newvalue);    

	ROS.edit(idSolution,vn);	
}

private function updateItem():void
{
	//création du tableau de valeur
	var vn:Array = new Array();
	vn["lib"] = this.UpdLib.text;
	vn["ref"] = this.UpdRef.text;
	vn["id_type_solution"] = this.UpdType.cb.selectedItem['id_type_solution'];
	ROS.edit(idSolution,vn);	
}

private function saveItemHandler(e:Object):void
{
   	if(!e)return;

    if (e.isError)
    {
        Alert.show("Error: " + e.data.error);
    }
    else
    {
    }     
}



/**
 * dragHeader handler for the datagrid. This handler is executed when the user 
 * clicks on a header column in the datagrid
 * updates the global orderColumn variable, refreshes the TableCollection
 * @param event DataGridEvent details about the column
 */
private function setOrder(event:DataGridEvent):void 
{
    orderColumn = event.columnIndex;
    var col:DataGridColumn = dataGrid.columns[orderColumn];
    col.sortDescending = !col.sortDescending;
	ColSelect.text = col.headerText;    
    event.preventDefault();
    //fill();
}

/**
 * Click handler for the "Save" button in the "Add" state
 * collects the information in the form and adds a new object to the collection
 */
private function insertItem():void {

	//création de l'objet de param
	//var pJS:Object = new Object();
	//création du tableau de param
	var pArr:Array = new Array;
	var val:String="";
    var frmC:Array = insertSolus.getChildren();
	//boucle sur chaque composant du modèle
    for each(var ctl:Object in frmC){
    	//récupère l'identifiant de la valeur
    	var ctlId:String=ctl.id;
		//récupère le contrôle d'édition
		var ctlVal:Object=ctl.getChildAt(0);
		//vérifie le type pour récupérer les modifs
    	if(ctlVal.className=="cbGroupeMot"){
    		val=ctlVal.cb.selectedItem[ctl.id];
    	}
    	if(ctlVal.className=="TextInput" || ctlVal.className=="TextArea"){
    		val=ctlVal.text;
    	}
    	//vérifie si le champ est obligatoire
    	if(!VerifChampOblig(val, ctlVal))return;
    	//incrémente le tableau
		pArr[ctlId]=val;
   	}
   	
	ROS.ajouter(pArr);
	
}

private function VerifChampOblig(val:String, ctlVal:Object):Boolean{
	
	if(val!="")return true;

	if(idGrille!="InsertMot")return true;

	var verif:Boolean=true;
	
	if(ctlVal.id=="ref"){
		Alert.show("La référence est obligatoire.");
		return false;
	}
	if(ctlVal.id=="lib"){
		Alert.show("Le libellé est obligatoire.");
		return false;
	}
	if(ctlVal.id=="id_type_solution"){
		Alert.show("Le type de solution est obligatoire.");
		return false;
	}
	
	return verif;
}


/**
 * Result handler for the insert call.
 * Alert the error if it exists
 * if the call went through ok, return to the list, and refresh the data
 */
private function insertItemHandler(e:Object):void
{
    goToView();
    ROS.getAll();
}

private function MetierSolusHandler(e:Object):void
{
	vsMetierSolus.selectedChild = viewMetierSolus;
    ROSM.findByIdSolution(idSolution);
}

private function CritereSolusHandler(e:Object):void
{
	vsCritereSolus.selectedChild = viewCritereSolus;
    ROSC.findByIdSolution(idSolution);
}


private function exportCsv():void{
	
    var parameters:String =
        "csv=true&"+
        "orderField="+orderField+"&"+
        "orderDirection=ASC"+"&"+ 
        "filter="+filterTxt.text+"&"+
        "idExi="+idExi+"&"+
        "idGrille="+idGrille+"&"+
        "idGroupe="+idGroupe+"&"+
        "idMot="+idMot+"&"+
        "f=FindAll"
    //vérifie si une recherhce est en cours
    if(pxml!="")parameters += "&"+ pxml;

	var u:URLRequest = new URLRequest(ENDPOINT_URL);
    u.data = parameters;
    u.method=URLRequestMethod.POST;
	trace ("dgGrille:exportCsv:query=" +ENDPOINT_URL+"?"+u.data);
	navigateToURL(u,"_blank");	
	
}

/** 
 * result handler for the fill call. 
 * if it is an error, show it to the user, else refill the arraycollection with the new data
 *
 */
private function fillHandler(e:Object):void
{
	if(!e)return;
	
    dataGrid.dataProvider = e.result as Array;
	
	/*
    var sortField:SortField = new SortField(null, true);
    var sort:Sort = new Sort();
    sort.fields = [sortField];

    dataArr.sort = sort;
    dataArr.refresh();

	cursor = dataArr.createCursor();
	*/
		
    dataGrid.enabled = true;

}


private function fillMetierHandler(e:Object, dg:DataGrid):void
{
	if(!e)return;
    dg.dataProvider = e.result as Array;
}



/**
 * Click handler for the "delete" button in the list
 * confirms the action and launches the deleteClickHandler function
 */
private function deleteItem():void {
    
    if (dataGrid.selectedItem)
    {
        Alert.show("Confirmez-vous la suppression de cette solution ?",
        "Confirmation Suppression", 3, this, deleteClickHandler);
    }
    
}

/**
 * Event handler function for the Confirm dialog raises when the 
 * Delete button is pressed.
 * If the pressed button was Yes, then the product is deleted.
 * @param object event
 * @return nothing
 */ 
private function deleteClickHandler(event:CloseEvent):void
{
    if (event.detail == Alert.YES) 
    {
		ROS.remove(idSolution);
    }
}

private function deleteMetierSolus():void {
    
    if (this.dgMetiers.selectedItem)
    {
        Alert.show("Confirmez-vous la suppression du metier pour cette solution ?",
        "Confirmation Suppression", 3, this, deleteMetierSolusClickHandler);
    }
    
}
private function deleteMetierSolusClickHandler(event:CloseEvent):void
{
    if (event.detail == Alert.YES) 
    {
		ROSM.remove(idSolution, dgMetiers.selectedItem['id_metier']);
    }
}

private function deleteCritereSolus():void {
    
    if (this.dgCritere.selectedItem)
    {
        Alert.show("Confirmez-vous la suppression du critère pour cette solution ?",
        "Confirmation Suppression", 3, this, deleteCritereSolusClickHandler);
    }
    
}
private function deleteCritereSolusClickHandler(event:CloseEvent):void
{
    if (event.detail == Alert.YES) 
    {
		ROSC.remove(idSolution, dgCritere.selectedItem['id_critere']);
    }
}


public function goToInsert():void
{
	this.selectedChild = insert;
}


/**
 * Load the "View" canvas.
 */
public function goToView():void
{
    this.selectedChild = view;
}

public function faultHandlerService(fault:FaultEvent):void
{
	Alert.show(fault.fault.faultCode.toString(), "FaultHandlerService");
}
 
public function resultHandlerService(result:ResultEvent):void
{
	ROS.getAll();
}      

public function AjoutMot(objName:String):void{
	
	//construction de la fenêtre d'édition
	var twAMC:twAjoutMotClef= twAjoutMotClef(
        PopUpManager.createPopUp(this, twAjoutMotClef, true));
	twAMC.endPoint=this.endPoint;
	twAMC.objName=objName;
	twAMC.titre = "Création d'un mot clef";
	twAMC.objSource = this;					
    PopUpManager.centerPopUp(twAMC);
    
}


        ]]>
    </mx:Script>
    
	<mx:RemoteObject id="ROS"
	    	source="{objName}" destination="zend" 
	    	endpoint="{endPoint}"
	    	showBusyCursor="true"
	    	fault="faultHandlerService(event)">
	 	<mx:method name="getAll"  result="fillHandler(event)"/>  	
	 	<mx:method name="edit"  result="resultHandlerService(event)"/>  	
	 	<mx:method name="remove"  result="resultHandlerService(event)"/>  	
	 	<mx:method name="ajouter"  result="insertItemHandler(event)"/>  	
	 	<mx:method name="csv"  result="resultHandlerService(event)"/>  	
	</mx:RemoteObject>
	
	<mx:RemoteObject id="ROSM"
	    	source="Model_DbTable_Gevu_solutionsxmetiers" destination="zend" 
	    	endpoint="{endPoint}"
	    	showBusyCursor="true"
	    	fault="faultHandlerService(event)">
	 	<mx:method name="findByIdSolution"  result="fillMetierHandler(event,dgMetiers)"/>  	
	 	<mx:method name="remove"  result="MetierSolusHandler(event)"/>  	
	 	<mx:method name="ajouter"  result="MetierSolusHandler(event)"/>  	
	</mx:RemoteObject>

	<mx:RemoteObject id="ROSC"
	    	source="Model_DbTable_Gevu_solutionsxcriteres" destination="zend" 
	    	endpoint="{endPoint}"
	    	showBusyCursor="true"
	    	fault="faultHandlerService(event)">
	 	<mx:method name="findByIdSolution"  result="fillMetierHandler(event,dgCritere)"/>  	
	 	<mx:method name="remove"  result="CritereSolusHandler(event)"/>  	
	 	<mx:method name="ajouter"  result="CritereSolusHandler(event)"/>  	
	</mx:RemoteObject>

	<mx:Canvas id="view" width="100%" height="100%">
		<mx:HBox width="100%" height="100%">
			<mx:VBox width="100%" height="100%" >		
				<mx:HBox id="AddDelete" visible="{showAddDelete}" width="0" height="0" >		
					<mx:LinkButton id="btnCsv" click="exportCsv()" icon="@Embed('images/csv.jpg')" toolTip="Exporter les solutions en csv" />
					<ns2:cUploadFile idExi="{idExi}" objName="Model_DbTable_Gevu_solutions" id="ufCsv" iconBtn="@Embed('images/csvImp.jpg')" ttBtn="Importer des solutions" ctlBind="{this}" wf="impCsv" typeFic="csv" />
					<mx:LinkButton id="btnAddNew" click="goToInsert()" icon="@Embed('images/AddRecord.png')" toolTip="Ajouter une solution" />
					<mx:LinkButton id="btnDelete" click="deleteItem()" icon="@Embed('images/DeleteRecord.png')" toolTip="Supprimer une solution" />
					<mx:HBox id="AddFilter" visible="{showAddfilter}" width="0" height="0" >					
						<mx:Label text="Rechercher par le champ : " /><mx:Label id="ColSelect" text="" />
						<mx:Button click="filterResults()" id="filterButton" icon="@Embed('images/SearchRecord.png')" toolTip="Search by champ" />
						<mx:TextInput id="filterTxt" toolTip="Rechercher par le champ sélectionné" enter="filterResults()" />
					</mx:HBox>		
				</mx:HBox>
				<mx:VBox id="fiche" width="100%" >
					<mx:HRule/>				
				</mx:VBox>
				<mx:DataGrid 
					id="dataGrid"
					editable="false"
					resizableColumns="true" 
					headerRelease="setOrder(event);"
					click="selectSolution(event);"
					textAlign="left"
					width="100%" height="100%"
					>			
					<mx:columns>
						<mx:DataGridColumn visible="false" headerText="id_solution" dataField="id_solution" />
						<mx:DataGridColumn headerText="Référence" dataField="ref" />   					
	   					<mx:DataGridColumn headerText="Type de solution"  dataField="LibTypeSolution" />
						<mx:DataGridColumn width="200" headerText="libellé" dataField="lib" />									
					</mx:columns>
				</mx:DataGrid>
				<mx:VBox fontSize="16" width="100%" paddingTop="6" paddingBottom="6" paddingLeft="6" paddingRight="6"  backgroundColor="#1D6E12" backgroundAlpha="0.32">
					<mx:HBox >
						<mx:VBox>
							<mx:Label text="Référence:" />
			            	<mx:TextInput id="UpdRef" />							
						</mx:VBox>
						<mx:VBox>
							<mx:Label text="Type de solution:"/>
			            	<ns2:cbGroupeMot id="UpdType" titre="un type de solution" keyName="id_type_solution"  objName="Model_DbTable_Gevu_typesxsolutions" endPoint="{ROS.endpoint}" />						
						</mx:VBox>
					</mx:HBox>			
					<mx:Label text="libellé de la solution:" />
	            	<mx:TextArea id="UpdLib" width="100%" height="100" />
					<mx:Button label="Enregistrer" click="updateItem()" />
				</mx:VBox>
			</mx:VBox>
			<mx:VBox id="detailSolus" width="100%" height="100%" paddingTop="6" paddingBottom="6" paddingLeft="6" paddingRight="6"  backgroundColor="#1D6E12" backgroundAlpha="0.32">
				<mx:Panel title="Illustration réglementaire" width="100%" height="50%" layout="absolute">
					<mx:VBox width="100%" height="100%" paddingTop="6" paddingBottom="6" paddingLeft="6" paddingRight="6"  >
						<mx:HBox>
							<mx:LinkButton id="btnAddNewIllu" click="goToInsert()" icon="@Embed('images/AddRecord.png')" toolTip="Ajouter une illustration" />
							<mx:LinkButton id="btnDeleteIllu" click="deleteItem()" icon="@Embed('images/DeleteRecord.png')" toolTip="Supprimer une illustration" />							
						</mx:HBox>							
					</mx:VBox>
				</mx:Panel>
				<mx:HBox width="100%" height="50%" >
					<mx:Panel title="Métiers" width="50%" height="100%" layout="absolute">
						<mx:ViewStack id="vsMetierSolus" width="100%" height="100%">
							<mx:VBox id="viewMetierSolus" width="100%" height="100%" paddingTop="6" paddingBottom="6" paddingLeft="6" paddingRight="6"  >
								<mx:HBox>
									<mx:LinkButton id="btnAddNewMetierSolus" click="vsMetierSolus.selectedChild = insertMetierSolus;" icon="@Embed('images/AddRecord.png')" toolTip="Ajouter un métier à la solution" />
									<mx:LinkButton id="btnDeleteMetierSolus" click="deleteMetierSolus()" icon="@Embed('images/DeleteRecord.png')" toolTip="Supprimer un métier de la solution " />							
								</mx:HBox>							
								<mx:DataGrid width="100%" height="50%" id="dgMetiers">
									<mx:columns>
										<mx:DataGridColumn headerText="Metiers" dataField="lib" />
										<mx:DataGridColumn headerText="Id Metier" dataField="id_metier" visible="false"/>
										<mx:DataGridColumn headerText="Id Solution" dataField="id_solution" visible="false"/>
									</mx:columns>
								</mx:DataGrid>					
							</mx:VBox>
							<mx:VBox id="insertMetierSolus" width="100%" height="100%" paddingTop="6" paddingBottom="6" paddingLeft="6" paddingRight="6"  >
								<mx:Label text="Choisissez un métier :"/> 
				            	<ns2:cbGroupeMot titre="un métier" keyName="id_metier" id="cbMetier" objName="Model_DbTable_Gevu_metiers" endPoint="{ROS.endpoint}" />
								<mx:HBox>
									<mx:Button label="Enregistrer" click="ROSM.ajouter(idSolution, cbMetier.cb.selectedItem['id_metier']);" />
									<mx:Button label="Annuler" click="vsMetierSolus.selectedChild = viewMetierSolus;" />				
								</mx:HBox>							
							</mx:VBox>
						</mx:ViewStack>											
					</mx:Panel>
					<mx:Panel title="Critères" width="50%" height="100%" layout="absolute">							
						<mx:ViewStack id="vsCritereSolus" width="100%" height="100%">
							<mx:VBox id="viewCritereSolus" width="100%" height="100%" paddingTop="6" paddingBottom="6" paddingLeft="6" paddingRight="6"  >
								<mx:HBox>
									<mx:LinkButton id="btnAddNewCritereSolus" click="vsCritereSolus.selectedChild = insertCritereSolus;" icon="@Embed('images/AddRecord.png')" toolTip="Ajouter un critère à la solution" />
									<mx:LinkButton id="btnDeleteCritereSolus" click="deleteCritereSolus()" icon="@Embed('images/DeleteRecord.png')" toolTip="Supprimer un critère de la solution " />							
								</mx:HBox>							
								<mx:DataGrid width="100%" height="50%" id="dgCritere">
									<mx:columns>
										<mx:DataGridColumn headerText="Référence" dataField="ref" />
										<mx:DataGridColumn headerText="Id critère" dataField="id_critere" visible="false"/>
										<mx:DataGridColumn headerText="Id Solution" dataField="id_solution" visible="false"/>
									</mx:columns>
								</mx:DataGrid>					
							</mx:VBox>
							<mx:VBox id="insertCritereSolus" width="100%" height="100%" paddingTop="6" paddingBottom="6" paddingLeft="6" paddingRight="6"  >
						    	<mx:Label text="Choisissez un critère :" />
				            	<ns2:cbGroupeMot labelName="ref" bAjout="false" titre="un critère" keyName="id_critere" id="cbCritere" objName="Model_DbTable_Gevu_criteres" endPoint="{ROS.endpoint}" />
								<mx:HBox>
									<mx:Button label="Enregistrer" click="ROSC.ajouter(idSolution, cbCritere.cb.selectedItem['id_critere']);" />
									<mx:Button label="Annuler" click="vsCritereSolus.selectedChild = viewCritereSolus;" />				
								</mx:HBox>							
							</mx:VBox>
								
						</mx:ViewStack>
					</mx:Panel>
				</mx:HBox>						
				<mx:Panel title="Produits préconisés" width="100%" height="50%" layout="absolute">
					<mx:VBox width="100%" height="100%" paddingTop="6" paddingBottom="6" paddingLeft="6" paddingRight="6"  >
						<mx:HBox>
							<mx:LinkButton id="btnAddNewProd" click="goToInsert()" icon="@Embed('images/AddRecord.png')" toolTip="Ajouter une illustration" />
							<mx:LinkButton id="btnDeleteProd" click="deleteItem()" icon="@Embed('images/DeleteRecord.png')" toolTip="Supprimer une illustration" />							
						</mx:HBox>							
					</mx:VBox>
				</mx:Panel>
			</mx:VBox>		
		</mx:HBox>

	</mx:Canvas>
	<mx:Canvas id="insert" width="100%" height="100%" >
		<mx:VBox>			
			<mx:Form width="100%" height="100%" id="insertSolus">			                    		
	            <mx:FormItem label="Référence:" id="ref" >
	            	<mx:TextInput id="refSolus" />
	            </mx:FormItem>
	            <mx:FormItem label="Libellé:" id="lib" >
	            	<mx:TextArea id="libSolus"  width="400" height="100" />
	            </mx:FormItem>
	            <mx:FormItem label="Type de solution:" id="id_type_solution" >
	            	<ns2:cbGroupeMot titre="un type de solution" keyName="id_type_solution"  objName="Model_DbTable_Gevu_typesxsolutions" endPoint="{ROS.endpoint}" />
	            </mx:FormItem>
			</mx:Form>
			<mx:HBox>
				<mx:Button label="Enregistrer" click="insertItem()" />
				<mx:Button label="Annuler" click="goToView()" />				
			</mx:HBox>
		</mx:VBox>
	</mx:Canvas>
</mx:ViewStack>
