<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%"
 creationComplete="creationCompleteHandler(event)"
 xmlns:compo="compo.*"
		   >
	<mx:Script>
		<![CDATA[
			import com.adobe.serialization.json.JSON;
			
			import compo.vbEditTreeCrit;
			
			import memorphic.xpath.XPathQuery;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.DragSource;
			import mx.core.IUIComponent;
			import mx.events.CloseEvent;
			import mx.events.DragEvent;
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			import mx.managers.DragManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			

			[Bindable] public var arrCrit:ArrayCollection;
			[Bindable] public var dt:Object;
			[Bindable] public var idScene:int;
			[Bindable] public var arrMC:Array;				

			[Bindable]
			[Embed(source="../images/file.gif")] 
			public var iconFile:Class; 			
			[Bindable]
			[Embed(source="../images/folder.gif")] 
			public var iconFolder:Class; 			
			[Bindable]
			[Embed(source="../images/folder-open.gif")] 
			public var iconFolderOpen:Class; 			
			
			private var xmlTree:XML;
			public var bChange:Boolean=false;
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				ROScenes.findByIdScenarioType(dt.idScenar, dt.type);
				ROC.findByIdTypeControle(dt.id_type_controle);				
			}
			
			public function saveScene():void
			{
				//création du tableau de valeur
				var vn:Array = new Array();
				var params:Array = new Array();
				
				//récupèration des critère non utilisé
				var ids:String = "-1";
				//récupèration des critères sélectionné
				tree.selectedIndex = 0;
				var critsSE:XML =  XML(tree.selectedItem);
				params.push({"idCritNU":ids,"idCritSE":critsSE.toXMLString()});
				vn["paramsCrit"] = JSON.encode(params);
				//enregistrement des modifications
				ROScenes.edit(idScene,vn);
				
			}
			protected function fillScene(e:ResultEvent):void
			{
				//si on ne trouve pas de scène on la crée
				if(!e || !e.result || e.result.length==0){
					var pArr:Array = new Array;
					pArr["id_scenario"]=dt.idScenar;
					pArr["type"]=dt.type;
					ROScenes.ajouter(pArr);
					return;
				}
				var arr:Array = e.result as Array;
				idScene = arr[0]["id_scene"];
				if(arr[0]["paramsCrit"] && arr[0]["paramsCrit"]!="[]"){
					var params:Object = JSON.decode(arr[0]["paramsCrit"]);
					/* plus nécessaire car on ne vide pas le datagrid
					pour pouvoir faire de multiple scénario de critère
					ROC.findByIdsControles(params[0]["idCritNU"]);
					*/
					xmlTree = XML(params[0]["idCritSE"]);
				}else{
					xmlTree =<node idCrit="-1" ref="critères" isBranch="true"></node>;
				}
				tree.dataProvider=xmlTree;
				openAllNodes(xmlTree);
				bChange = false;
			}
			
			private function fillCritere(e:Object):void
			{
				if(!e || e.result.length==0)return;
				/*ArrayCollection pour effectuer un refresh
				mais attanetion au performances : http://blog.phiphou.com/index.php/?2009/01/18/148-performances-comparaison-rapide-entre-arraycollection-array-et-vector
				*/
				arrCrit = new ArrayCollection(e.result as Array);;
				//ajoute le nombre d'utilisation
				for each( var o:Object in arrCrit)
				{
					// create the XPathQuery instance and parse the path
					var myQuery:XPathQuery = new XPathQuery("//node[@id_critere='"+o.id_critere+"']");
					// execute the statement on an XML object and get the result
					var result:XMLList = myQuery.exec(xmlTree);
					o["NbUtil"] = result.length(); 
				}
				
				dataGrid.dataProvider = arrCrit;
				
			}
			
			private function faultHandlerService(fault:FaultEvent, os:String=""):void {
				var str:String;
				str = "Code: "+fault.fault.faultCode.toString()+"\n"+
					"Detail: "+fault.fault.faultDetail.toString()+"\n"+
					"String: "+fault.fault.faultString.toString()+"\n";
				
				if (os!="")
					os = " - "+os;
				Alert.show(str, "FaultHandlerService"+os);
			}
			
//merci à http://www.flex-blog.com/drag-and-drop-from-datagrid-or-advanceddatagrid-to-tree/
			private function doDragDrop(event:DragEvent):void
			{
				var item:XML;
				// cancel default
				event.preventDefault();
				
				// get the drag format (its always items in our case
				// when you are dragging FROM a Tree its treeItems
				var draggedFormat:String = event.dragSource.formats[0];
				
				// Get the dragged items
				var draggedItems:Array = event.dragSource.dataForFormat(draggedFormat) as Array;
				
				// Calculate the index in the Tree where the items were dropped
				var dropIndex:int = tree.calculateDropIndex(event);

				//dans le cas d'un datagrid								
				// Set the selected index of the Tree to the dropIndex
				tree.selectedIndex = dropIndex;
				
				// Check if we are dropping on a node
				
				// Add each dragged item to the Tree by apppending it
				// as a child of the selected node in the Tree.
				for each( var object:Object in draggedItems )
				{
					// set the attribut
					if(draggedFormat=="treeItems"){
						item = cloneNode(object)
						//on supprime l'ancien noeud
						delete  tree.dataProvider[0].descendants().(@ref==item.@ref)[0];
					}else{
						// create item
						item = <node></node>;
						item.@id_critere = object.id_critere;
						item.@ref = object.ref;
						item.@isBranch = "false";
					}
					
					// use appendChild to add the item.
					var si:XML = XML(tree.selectedItem);
					// (if selected item is an item then append to parent)
					if( si.@isBranch == "true")
					{
						si.appendChild(item);
						//incrémente le nombre d'utilisation
						var i:int = arrCrit.getItemIndex(object);
						if(i>0) arrCrit[i]["NbUtil"] ++;
					}
					else{
						si.@isBranch = true;
						si.appendChild(item);
					}
				}
				//met à jour le grid
				arrCrit.refresh();
				saveScene();
				bChange = true;
			}
			private function cloneNode(obj:Object):XML
			{
				// create item
				var item:XML;
				item = <node></node>;
				item.@ref = obj.@ref;						
				item.@criteres = obj.@criteres;
				//on déplace les noeuds enfants
				if(obj.children().length()>0){
					for each( var ichild:Object in obj.children()){
						item.appendChild(cloneNode(ichild));
					}
					item.@isBranch = "true";
				}else{
					item.@isBranch = "false";
				}				
				
				return item
			}
				
			
			private function doDragEnter(event:DragEvent):void
			{
				// Cancel default behaviour
				event.preventDefault();
				// Tell the DragManager that the Tree will accent the DragDrop
				DragManager.acceptDragDrop( Tree(event.target) );
				// hide the "drop line" that is shown in Tree control
				// when dropping in a Tree
				tree.showDropFeedback(event);
			}
			
			private function doDragOver(event:DragEvent):void
			{
				// Show the default "drop line" in the Tree control
				tree.showDropFeedback(event);
				// Cancel default behavious
				event.preventDefault();
			}
			
			private function doDragExit(event:DragEvent):void
			{
				// hide the "drop line" that is shown in Tree control
				// when dropping in a Tree
				tree.hideDropFeedback(event);
			}
			
			private function doDragComplete(event:DragEvent):void
			{
				// hide the "drop line" that is shown in Tree control
				// when dropping in a Tree
				tree.hideDropFeedback(event);
			}
									
			protected function dataGrid_clickHandler(event:MouseEvent):void
			{
				var s:Object=event.currentTarget.selectedItem;
				if(s)critSelect.text = s.criteres;				
			}
			
			protected function tree_clickHandler(event:MouseEvent):void
			{
				if(!event.currentTarget.selectedItem)return;
				var item:XML=event.currentTarget.selectedItem as XML;
				//met à jour l'affichage du critère
				critSelect.text = getCritText(item.@id_critere);
			}
			
			private function getCritText(idCrit:String):String
			{
				for each (var cri:Object in this.arrCrit){
					if(cri.id_critere==idCrit)return cri.criteres;
				}
				return "";				
			}			

			// Define the event listener for the itemEditBeginning event 
			// to disable editing when the user selects 
			// the top node in the tree.
			private function disableEditing(event:ListEvent):void {
				if(event.rowIndex==0) {  
					event.preventDefault(); 
				}
			}                                       
			
			// Define the event listener for the itemEditEnd event 
			// to copy the updated data back to the data provider 
			// of the Tree control.
			public function processData(event:ListEvent):void {    
				
				// Disable copying data back to the control.
				event.preventDefault();
				
				//Charge les valeurs
				tree.editedItemRenderer.data.@ref =	vbEditTreeCrit(event.currentTarget.itemEditorInstance).ref;
				tree.editedItemRenderer.data.@CondRep =	vbEditTreeCrit(event.currentTarget.itemEditorInstance).CondRep;
				if(vbEditTreeCrit(event.currentTarget.itemEditorInstance).remove=="oui"){
					delete  tree.dataProvider[0].descendants().(@ref==tree.editedItemRenderer.data.@ref)[0];
				}

				// Close the cell editor.
				tree.destroyItemEditor(); 
				
				// Notify the list control to update its display.
				tree.dataProvider.notifyItemUpdate(tree.editedItemRenderer);
			}                       			
			
			private function TreeIconFunction(item:Object):Class{
				
				if(item.@idCrit==-1){
					tree.expandItem(item,true);
				}
				
				if(item.@isBranch == "true"){
					if(tree.isItemOpen(item)){
						return iconFolderOpen;						
					}else{
						return iconFolder;
					}
					//tree.expandItem(item, false);					
				}else{
					return iconFile;					
				}			
				
			}				
			
			protected function tree_itemEditBeginHandler(event:ListEvent):void
			{
				vbEditTreeCrit(event.currentTarget.itemEditorInstance).cbData = arrMC;				
			}
						
			
			protected function ajouter_resultHandler(event:ResultEvent):void
			{
				ROScenes.findByIdScenarioType(dt.idScenar, dt.type);				
			}

			public function openAllNodes(dtTree:Object):void
			{
				var openNodes:Array = new Array();				
				var data:XML = new XML("<root></root>");
				data.appendChild(dtTree);			
				addNode(data, openNodes);
				tree.openItems = openNodes;
			}
			
			// fonction récursive
			private function addNode(node:XML, array:Array):void
			{
				for each (var childNode:XML in node.children())
				{
					// Si ce noeud contient d'autres noeuds ou des feuilles
					// faire traitement
					if (childNode.hasComplexContent())
					{
						array.push(childNode);
						addNode(childNode, array);
					}
				}
			}						
		]]>
	</mx:Script>
	<mx:RemoteObject id="ROC"
					 source="Models_DbTable_Gevu_criteres" destination="zend" 
					 showBusyCursor="true"
					 fault="faultHandlerService(event)">
		<mx:method name="findByIdTypeControle"  result="fillCritere(event)"/>
		<mx:method name="findByIdsControles"  result="fillCritere(event)"/>
	</mx:RemoteObject>
	<mx:RemoteObject id="ROScenes"
					 source="Models_DbTable_Gevu_scenes" destination="zend" 
					 showBusyCursor="true"
					  result="fillScene(event)"
					 fault="faultHandlerService(event)">
		<mx:method name="edit"  />  	
		<mx:method name="findByIdScenarioType" />
		<mx:method name="ajouter" result="ajouter_resultHandler(event)"  />
		
	</mx:RemoteObject>
	
	<mx:VBox left="4" right="4" top="4" bottom="4">
		<mx:Text fontSize="12" fontWeight="bold" id="critSelect" text="" width="100%" />
		<mx:HBox height="100%" width="100%" >
			<mx:DataGrid 
				id="dataGrid"
				editable="false"
				resizableColumns="true" 
				textAlign="left"
				height="100%"
				width="166"
				allowMultipleSelection="true" 
				dragEnabled="true" 
				dropEnabled="true" 
				dragMoveEnabled="false"
				click="dataGrid_clickHandler(event)"
				>			
				<mx:columns>
					<mx:DataGridColumn headerText="Référence" dataField="ref" width="132"  />   					
					<mx:DataGridColumn headerText="Nb" dataField="NbUtil" />   					
				</mx:columns>
			</mx:DataGrid>
			<mx:Tree id="tree" 
					 width="100%" height="100%"
					 labelField="@ref"
					 showRoot="true"
					 dragEnabled="true"
					 dropEnabled="true"
					 dragOver="doDragOver(event)"
					 dragDrop="doDragDrop(event)"
					 dragEnter="doDragEnter(event)"
					 dragExit="doDragExit(event)"
					 
					 editable="true"  
					 itemEditor="compo.vbEditTreeCrit" 
					 editorHeightOffset="40" editorWidthOffset="200" 
					 editorXOffset="10" editorYOffset="20"
					 itemEditBeginning="disableEditing(event);" 
					 itemEditEnd="processData(event);"

					 iconFunction="TreeIconFunction"
				 	 click="tree_clickHandler(event);"
					 />
		</mx:HBox>
	</mx:VBox>
		
</mx:Canvas>
