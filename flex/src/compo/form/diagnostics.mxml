<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml"
		   xmlns:s="library://ns.adobe.com/flex/spark" 
		   xmlns:compo="compo.*"
		   label="Diagnostics"
		   name="formDiag"
		   width="100%" height="100%"
		   creationComplete="creationCompleteHandler(event)" xmlns:stat="compo.stat.*" xmlns:form="compo.form.*"
		   >
	<mx:Script>
		<![CDATA[
			import com.adobe.serialization.json.JSON;
			
			import memorphic.xpath.XPathQuery;
			
			import mx.charts.ChartItem;
			import mx.charts.chartClasses.ChartBase;
			import mx.charts.series.items.ColumnSeriesItem;
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.DropdownEvent;
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;        
						
			[Bindable] public var NodeData:Object;
			[Bindable] public var diagData:Array;
			[Bindable] public var scenarData:Array;
			[Bindable] public var scrDescData:Array;
			[Bindable] public var sceneData:XML;
			[Bindable] public var reponseData:Array;
			[Bindable] public var choixData:Array = new Array;
			[Bindable] public var xlmScene:XML;
			[Bindable] public var selectDiag:Object;			
			[Bindable] public var bAjout:Boolean=false;			
			[Bindable] public var idLieu:int;
			[Bindable] public var idTypeCtlParent:String;

			private var numEtape:int;
			private var numQuestion:int;
			private var nodeQuestion:XML;
			private var idTypeControle:String;
			private var idCritere:String;
			private var nodeXpath:String="/node/node";
			private var totQestionInter:int=-1;
			private var numQestionInter:int;
			private var arrQestion:Array = new Array;
			private var idInstant:int=-1;
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				//roScena.findByExiDroit(this.parentApplication.idExi);
				roMC.getAllByType(2);
				if(bAjout){
					vs.selectedChild = ajout;
					if(idTypeCtlParent)
						roDiag.getScenarioComplet(this.parentApplication.idScenar, idLieu, idTypeCtlParent);
				}
				
			}
			
			protected function adgCrit_itemClickHandler(event:ListEvent):void
			{
				var s:Object=event.currentTarget.selectedItem;
				if(s.id_lieu){
					// récupère les données du diagnostic
					roDiag.getDiagComplet(s.id_lieu,this.parentApplication.idBase,s.id_instant);					
				}
				
			}
			
			private function faultHandlerService(fault:FaultEvent, os:String=""):void {
				var str:String;
				str = "Code: "+fault.fault.faultCode.toString()+"\n"+
					"Detail: "+fault.fault.faultDetail.toString()+"\n"+
					"String: "+fault.fault.faultString.toString()+"\n";
				
				if (os!="")
					os = " - "+os;
				Alert.show(str, "FaultHandlerService"+os);
			}
			
			protected function method1_resultHandler(event:ResultEvent):void
			{
				diagData = event.result as Array;
				dgQuestions.dataProvider = diagData['questions'];
			}
			
			
			protected function dgQuestions_itemClickHandler(event:ListEvent):void
			{
				selectDiag = event.currentTarget.selectedItem;
				if(selectDiag){
					initProblemes(selectDiag.id_diag, selectDiag.criteres+" : "+selectDiag.reponse);
					//formObs.idDiag = selectDiag.id_diag;
					//formObs.init();
				}
			}
			
			private function initProblemes(idDiag:int, txtDiag:String):void
			{
				formProbs.idDiag = idDiag;
				formProbs.init();
				formProbs.txtCrit.text = txtDiag;				
			}
			
			private function sortDiag(item:*, index:int, array:Array):Boolean
			{
				if(item.id_diag == selectDiag.id_diag)
					return true;
				else
					return false;

			}
			//TODO : assistant saisie d'un scénario : http://www.seaflexandsun.com/demo/carrousel/srcview/index.html
						
			protected function method2_resultHandler(event:ResultEvent):void
			{
				scrDescData = event.result as Array;
				if(scrDescData){
					showQuestion();
				}
				
			}
			
			private function showQuestion():void{
				lblEtapeTot.text = scrDescData["etapes"].length.toString();
				getQuestion(0,0);									
			}
			
			private function getQuestion(etape:int, question:int):void
			{
				
				if(arrQestion.length == 0 || !arrQestion[etape]){
					//récupère les paramètre de la scène
					setQuestionParams(etape);
				}
				
				this.numEtape=etape;
				this.numQuestion=question;
				//vérifie si l'étape à changée
				if(lblEtapeNum.text != String(etape+1)){
					//change le numéro de l'étape courante
					lblEtapeNum.text = String(etape+1);				
					idTypeControle = arrQestion[etape]["idCtrl"];
					lblQuestionAll.text = arrQestion[etape]["nbAll"];
				}
				ckReponse.lblQ = arrQestion[etape].qst[question]["lib"];
				ckReponse.decocheVals();
				lblQuestionNum.text = String(question+1);
				
				//change le nombre de question total
				lblQuestionTot.text = arrQestion[this.numEtape].qst[this.numQuestion].cd[0].fin; 
				
				//vérifie s'il faut charger une réponse 
				var strProb:String = "";
				if(arrQestion[this.numEtape].qst[this.numQuestion].vn!=-1){
					ckReponse.setVal(arrQestion[this.numEtape].qst[this.numQuestion].vn.id_reponse);
					strProb = arrQestion[this.numEtape].qst[this.numQuestion].lib+" : "+ckReponse.getVal();
				}
				//charge les problèmes
				initProblemes(arrQestion[this.numEtape].qst[this.numQuestion].idDiag, strProb);
				
			}
			
			private function setQuestionParams(etape:int):void
			{
				var myQuery:XPathQuery;
				if(!arrQestion[etape]){
					arrQestion.push({"idCtrl":0,"nbAll":0,"nbTot":0,"qst":new Array()});
					var params:Object = JSON.decode(scrDescData["etapes"][etape]["paramsCrit"]);
					xlmScene = XML(params[0]["idCritSE"]);						
					arrQestion[etape]["idCtrl"] = scrDescData["etapes"][etape]["idCtrl"];
					//compte le nombre de toute les questions
					myQuery = new XPathQuery("count(//@id_critere)");
					arrQestion[etape]["nbAll"] = "("+String(myQuery.exec(xlmScene))+")";
					//création du tableau des questions
					setArrQuestion(etape, xlmScene, 0);
					arrQestion[etape]["nbTot"] = arrQestion[etape].qst.length;
				}
			}
				
			private function setArrQuestion(etape:int, node:XML, niv:int):int
			{
				var cd:String;var idCrit:String;var lib:String;var arrConRep:Array;var cds:Array;var fin:int;var i:Number;var o:Object;

 
				for each (var q:XML in node.children()){
					cd = String(q.@["CondRep"]);
					if(cd=="")cd = "no";
					idCrit = String(q.@["id_critere"]);
					//vérifie si une question existe déjà pour ce critère et ce niveau
					var verifCrit:int = verifArrQuestionCrit(etape,idCrit);
					if(verifCrit!=-1){
						fin = setArrQuestion(etape, q, niv);
						arrQestion[etape].qst[verifCrit].cd.push({"valeur":cd,"next":niv,"fin":fin});
						//met à jour la fin des questions enfants
						for (i=niv; i<fin; i++){
							cds = arrQestion[etape].qst[i].cd
							for each (o in cds){
								o.fin = fin;
							}
						}						
					}else{
						lib = getCritText(arrQestion[etape]["idCtrl"], idCrit);
						arrQestion[etape].qst.push({"idCrit":idCrit,"lib":lib,"cd":new Array(),"vn":-1,"idDiag":-1});
						fin = setArrQuestion(etape, q, niv+1);
						arrQestion[etape].qst[niv].cd.push({"valeur":cd,"next":niv+1,"fin":fin});
						//met à jour la fin des questions enfants
						for (i=niv+1; i<fin; i++){
							cds = arrQestion[etape].qst[i].cd
							for each (o in cds){
								o.fin = fin;							
							}
						}						
					}
					niv = fin;
				}
				return niv;
			}
			private function verifArrQuestionCrit(etape:int, idCrit:String):int
			{
				var i:int = 0;
				for each (var q:Object in arrQestion[etape].qst){
					if(q.idCrit==idCrit) return i;
					i++;
				}
				return -1;
			}

			protected function chkReponse(nom:String, val:Object):void
			{

				//stocke la réponse
				var vn:Array = new Array();
				vn["id_critere"] = arrQestion[this.numEtape].qst[this.numQuestion].idCrit;
				vn["id_reponse"] = val;	
				vn["id_type_controle"] = idTypeControle;
				if(idInstant==-1){
					creaChoix(vn);
				}else{
					if(arrQestion[this.numEtape].qst[this.numQuestion].idDiag!=-1)vn["id_diag"] = arrQestion[this.numEtape].qst[this.numQuestion].idDiag;
					setChoix(vn);
				}
				arrQestion[this.numEtape].qst[this.numQuestion].vn = vn;

			}

			protected function nextReponse(val:Object):void
			{
				//vérifie s'il faut afficher une question particulière
				var cds:Array = arrQestion[this.numEtape].qst[this.numQuestion].cd;
				var arrConRep:Array;
				for each (var cd:Object in cds){
					//1 	Oui, 2 	Non, 124 	N. A., 141 	Sous réserve
					if(cd.valeur=="no" || val==124 || val==141){
						getQuestion(this.numEtape, cd.next);
					}else if(cd.valeur=="2_"+val){
						getQuestion(this.numEtape, cd.next);
					}
				}					
				
			}
			
			protected function creaChoix(vn:Object):void
			{
				ajout.enabled = false
				roDiag.creaChoix(this.parentApplication.idExi, idLieu, txtComment.text, vn, this.parentApplication.idBase);
			}
			
			protected function setChoix(vn:Object):void
			{
				ajout.enabled = false
				var choix:Array= new Array;
				choix.push(vn);
				roDiag.setChoix(this.parentApplication.idExi, idLieu, txtComment.text, choix, this.parentApplication.idBase, idInstant);
			}
			protected function roDiagSetChoix_resultHandler(event:ResultEvent):void
			{
				var arr:Array = event.result as Array;
				arrQestion[this.numEtape].qst[this.numQuestion].idDiag = arr.idDiags[0];
				nextReponse(arrQestion[this.numEtape].qst[this.numQuestion].vn.id_reponse);
				ajout.enabled = true;
			}
			protected function roDiagCreaChoix_resultHandler(event:ResultEvent):void
			{
				var arr:Array = event.result as Array;
				this.idInstant = arr.idInst;
				arrQestion[this.numEtape].qst[this.numQuestion].idDiag = arr.idDiag;
				nextReponse(arrQestion[this.numEtape].qst[this.numQuestion].vn.id_reponse);
				ajout.enabled = true;
			}
						
			
			private function getCritText(idTypeControle:String, idCrit:String):String
			{
				for each (var cri:Object in scrDescData["criteres"]["ctrl_"+idTypeControle]){
					if(cri.id_critere==idCrit){
						//affiche l'icone
						var dt:Object = new Object;
						dt.icone = cri.icone;
						dt.lib = cri.lib;
						hbCtl.dt = dt;
						hbCtl.init();
						return cri.criteres;
					}
				}
				return "";				
			}
			
			protected function btnNextEtape_clickHandler(event:MouseEvent):void
			{
				var num:int = int(lblEtapeNum.text);
				getQuestion(num,1);
				
			}
			
			protected function btnPrevEtape_clickHandler(event:MouseEvent):void
			{
				var num:int = int(lblEtapeNum.text);
				getQuestion(num-2,1);
				
			}
			
			protected function btnPrevQuest_clickHandler(event:MouseEvent):void
			{
				var numE:int = int(lblEtapeNum.text)-1;
				var numQ:int = int(lblQuestionNum.text)-2;
				getQuestion(numE,numQ);				
			}
			
			protected function btnNextQuestion_clickHandler(event:MouseEvent):void
			{
				var numE:int = int(lblEtapeNum.text)-1;
				var numQ:int = int(lblQuestionNum.text);
				getQuestion(numE,numQ);								
			}

			protected function roMC_resultHandler(e:ResultEvent):void
			{
				if(!e || !e.result)return;
				reponseData = e.result as Array;
			}			
			
			protected function method3_resultHandler(event:ResultEvent):void
			{
				if(!event || !event.result)return;
				scenarData = event.result as Array;
			}
			/*Ancienne version de l'enregistrement			
			protected function btnSaveChoix_clickHandler(event:MouseEvent):void
			{
				
				for each (var eta:Object in arrQestion){
					for each (var qst:Object in eta.qst){
						if(qst.vn!=-1)choixData.push(qst.vn);
					}
				}
				if(choixData.length > 0){ 
					roDiag.setChoix(this.parentApplication.idExi, idLieu, txtComment.text, choixData, this.parentApplication.idBase, idInstant);
				}			
			}
			protected function roDiagSetChoix_resultHandler(event:ResultEvent):void
			{
			this.choixData = new Array;
			this.idInstant = -1;
			//rafraichi la liste des diags
			this.parentApplication.roDiagnostique.getNodeRelatedData(idLieu, this.parentApplication.idExi, this.parentApplication.idBase);
			}
			*/
			

			/*
			protected function cbScenario_changeHandler(event:ListEvent):void
			{
				var item:Object = cbScenario.selectedItem;
				var arr:Array = item["id"].toString().split("_");
				roDiag.getScenarioComplet(arr[1], idLieu, idTypeCtlParent);
			}			
			*/			
			protected function ajout_creationCompleteHandler(event:FlexEvent):void
			{
				showQuestion();
			}
			
			protected function btnAjout_clickHandler(event:MouseEvent):void
			{				
				vs.selectedChild = ajout;
				/*on crée l'instant à la première réponse
				var vn:Array = new Array();
				vn["nom"] = "new_diag";
				vn["id_exi"] = this.parentApplication.idExi;	
				roDiag.setInstant(vn,this.parentApplication.idBase);
				*/
			}
			
			protected function roInstAjout_resultHandler(event:ResultEvent):void
			{
				if(!event.result)return;
				idInstant = event.result as int;
			}
			
			
		]]>
	</mx:Script>
	<mx:RemoteObject id="roDiag"
					 destination="zend"
					 source="GEVU_Diagnostique"
					 fault="faultHandlerService(event, 'GEVU - Diagnostic');"
					 showBusyCursor="true" 
					 >
		<mx:method name="getDiagComplet" result="method1_resultHandler(event)" />
		<mx:method name="getScenarioComplet" result="method2_resultHandler(event)" />
		<mx:method name="setChoix" result="roDiagSetChoix_resultHandler(event)" />
		<mx:method name="setInstant" result="roInstAjout_resultHandler(event)" />
		<mx:method name="creaChoix" result="roDiagCreaChoix_resultHandler(event)" />
	</mx:RemoteObject>
	<mx:RemoteObject id="roScena"
					 destination="zend"
					 source="Models_DbTable_Gevu_scenario"
					 fault="faultHandlerService(event, 'GEVU - Diagnostic - Scenario');"
					 showBusyCursor="true"
					 >
		<mx:method name="findByExiDroit" result="method3_resultHandler(event)" />
	</mx:RemoteObject>
	<mx:RemoteObject id="roMC"
					 source="Models_DbTable_Gevu_motsclefs" destination="zend" 
					 showBusyCursor="true"
					 fault="faultHandlerService(event, 'GEVU - Diagnostic - Mot-clef')">
		<mx:method name="getAllByType" result="roMC_resultHandler(event)"/>  	
	</mx:RemoteObject>
		
	<mx:VBox width="100%" height="100%">
		<mx:HBox verticalAlign="middle">
			<mx:LinkButton click="{vs.selectedChild = lecture;}" icon="@Embed('images/eye.gif')" height="18" width="18" toolTip="Voir les diagnostics" />			
			<mx:LinkButton id="btnAjout" click="btnAjout_clickHandler(event)" icon="@Embed('images/AddRecord.png')" toolTip="Ajouter un diagnostic" />			
		</mx:HBox>
		<mx:ViewStack id="vs" width="100%" height="100%" >			
			<mx:HBox id="lecture" width="100%" height="100%">
				<mx:AdvancedDataGrid id="adgCrit"  width="100%" height="100%" color="0x323232"
									 initialize="gcCrit.refresh();"
									 itemClick="adgCrit_itemClickHandler(event)"
									 >
					<mx:dataProvider>
						<mx:GroupingCollection id="gcCrit" source="{NodeData.enfants}">
							<mx:grouping>
								<mx:Grouping>
									<mx:GroupingField name="controle" />
								</mx:Grouping>
							</mx:grouping>
						</mx:GroupingCollection>
					</mx:dataProvider>        		
					<mx:columns>
						<mx:AdvancedDataGridColumn dataField="exis" headerText="Diagnostics" />
						<mx:AdvancedDataGridColumn dataField="commentaires" headerText="Commentaires" />
						<mx:AdvancedDataGridColumn dataField="instant" headerText="Date"  />
					</mx:columns>
				</mx:AdvancedDataGrid>
				<mx:DataGrid id="dgQuestions" height="100%" width="100%"
							 itemClick="dgQuestions_itemClickHandler(event)"  
							 >
					<mx:columns>
						<mx:DataGridColumn dataField="id_diag" visible="false" />
						<mx:DataGridColumn dataField="ref" width="100" />
						<mx:DataGridColumn dataField="criteres" />
						<mx:DataGridColumn dataField="reponse" width="60" />
					</mx:columns>
				</mx:DataGrid>
			</mx:HBox>
			<mx:VBox id="ajout" width="100%" height="100%" creationComplete="ajout_creationCompleteHandler(event)" >
				<mx:HBox verticalAlign="middle">
					<!--
					<mx:ComboBox id="cbScenario" change="cbScenario_changeHandler(event)" dataProvider="{scenarData}" labelField="lib"  prompt="Selectionner un scenario" />					
					-->
					<mx:Label text="Etapes : " />
					<mx:Button styleName="leftArrowButton" id="btnPrevEtape" click="btnPrevEtape_clickHandler(event)" toolTip="Passe à l'étape précédente" enabled="{int(lblEtapeNum.text) > 1}" />
					<mx:Label id="lblEtapeNum" text="0" /><mx:Label text=" sur " /><mx:Label id="lblEtapeTot" text="0" />
					<mx:Button styleName="rightArrowButton" id="btnNextEtape" click="btnNextEtape_clickHandler(event)" toolTip="Passe à l'étape suivante" enabled="{lblEtapeNum.text != lblEtapeTot.text}" />
				<!--
				</mx:HBox>
				<mx:HBox verticalAlign="middle">
				-->
					<compo:hbControle id="hbCtl" />
					<mx:Label text="Questions : " />
					<mx:Button styleName="leftArrowButton" id="btnPrevQuestion" click="btnPrevQuest_clickHandler(event)" toolTip="Passe à la question précédente" enabled="{int(lblQuestionNum.text) > 1}" />
					<mx:Label id="lblQuestionNum" text="1" /><mx:Label id="lblQuestionInter" text="" /><mx:Label text=" sur " /><mx:Label id="lblQuestionTot" text="0" /><mx:Label id="lblQuestionAll" text="0" />
					<mx:Button styleName="rightArrowButton" id="btnNextQuestion" click="btnNextQuestion_clickHandler(event)" toolTip="Passe à la question suivante" enabled="{lblQuestionNum.text != lblQuestionTot.text}" />
				</mx:HBox>
				<form:repType2 id="ckReponse" lblQ="" Q="reponse_1" fnct="{this.chkReponse}" />
				<mx:HBox width="100%">
					<!-- <mx:Button id="btnSaveChoix" label="enregistrer" click="btnSaveChoix_clickHandler(event)" toolTip="Enregistre les réponses" /> -->
					<mx:Label text="Commentaires :" />
					<mx:TextInput id="txtComment" width="100%" />					
				</mx:HBox>
			</mx:VBox>
		</mx:ViewStack>
		<mx:TabNavigator id="tn"  width="100%" height="100%" color="0x323232" >
			<s:NavigatorContent label="Problèmes">
				<form:problemes id="formProbs" />
			</s:NavigatorContent>
			<s:NavigatorContent label="Solutions">
				<s:Label text="bientôt..."/>
			</s:NavigatorContent>
		</mx:TabNavigator>		
	</mx:VBox>

</mx:Canvas>
